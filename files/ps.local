.\" -*- nroff -*-
.\"
.\" ps.local
.\"
.
.nr my:debug-font 0
.
.\"tm configure fonts T, H, C with M, G using fspecial and fzoom.
.\".ds fnT-default "M\""
.ds fnT-default "-zoom -1 M\""
.\".ds fnH-default "G\""
.ds fnH-default "-zoom -1 G\""
.ds fnC-default "-zoom -1 M\""
.\"tm if Code is avilable, use it for C.
.if F CodeR .ds fnC-default "-zoom 900 -ftr Code\""
.\"tm use defaults if no font configuration options are specified.
.if !d fnT .ds fnT \*[fnT-default]
.if !d fnH .ds fnH \*[fnH-default]
.if !d fnC .ds fnC \*[fnC-default]
.
.ds my:fzoom-styles "R I B BI O X V BV VI BVI\""
.
.de my:fspecial
.  if \\n[my:debug-font] .tm \\$0 \\$*
.  fspecial \\$1R  \\$2R
.  ie F \\$2I  .fspecial \\$1I \\$2I
.  el .fspecial \\$1I \\$2R
.  fspecial \\$1B \\$2B
.  ie F \\$2BI .fspecial \\$1BI \\$2BI
.  el .fspecial \\$1BI \\$2B
..
.de my:fzoomf
.  if \\n[my:debug-font] .tm \\$0 \\$*
.  ds my:fzoomf-family \\$1
.  nr my:fzoomf-factor \\$2
.  shift 2
.  while (\\n(.$ > 0) \{\
.    if F\\*[my:fzoomf-family]\\$1 \
.    fzoom \\*[my:fzoomf-family]\\$1 \\n[my:fzoomf-factor]
.    shift
.  \}
..
.de my:fzoom
.  if \\n[my:debug-font] .tm \\$0 \\$*
.  nr my:fzoom-factor \\$4
.  if \\n[my:fzoom-factor]=0 .nr my:fzoom-factor 1000
.  my:fzoomf \\$1 0 R
.  my:fzoomf \\$2 0 R
.  ie '\\$3'w' \{\
.    nr my:fzoom-\\$1.w \\w'\\f[\\$1R]m\\fP'
.    nr my:fzoom-\\$2.w \\w'\\f[\\$2R]m\\fP'
.    nr my:fzoom (\\n[my:fzoom-factor] * \\n[my:fzoom-\\$2.w] / \\n[my:fzoom-\\$1.w])
.  \}
.  el \{\
.    nr my:fzoom-dummy  \\w'\\f[\\$1R]M\\fP'
.    nr my:fzoom-\\$1.h (\\n[rst] - \\n[rsb])
.    nr my:fzoom-dummy  \\w'\\f[\\$2R]M\\fP'
.    nr my:fzoom-\\$2.h (\\n[rst] - \\n[rsb])
.    nr my:fzoom (\\n[my:fzoom-factor] * \\n[my:fzoom-\\$2.h] / \\n[my:fzoom-\\$1.h])
.  \}
.  my:fzoomf \\$2 \\n[my:fzoom-factor] \\*[my:fzoom-styles]
.  my:fzoomf \\$1 \\n[my:fzoom] \\*[my:fzoom-styles]
..
.
.de my:fconfig
.  if \\n[my:debug-font] .tm \\$0 \\$*
.  if \\n[.$]=0 .return
.  ds my:font \\$1
.  shift
.  nr my:font-ftr 0
.  nr my:fconfig-zoom 0
.  nr my:fconfig-ratio 0
.  ds my:fconfig-dir h
.  nr my:fconfig-easy 1
.  if '\\*[my:font]'C' .ds my:fconfig-dir w
.  while \\n(.$ \{\
.    ds my:font-c \\$1
.    substring my:font-c 0 0
.    ie !'\\*[my:font-c]'-' .break
.    el \{ .ie '\\$1'-ftr' \{\
.      nr my:font-ftr 1
.    \}
.    el \{ .ie '\\$1'-zoom' \{\
.      shift
.      nr my:fconfig-zoom \\$1
.    \}
.    el \{ .ie '\\$1'-w' \{\
.      ds my:fconfig-dir w
.    \}
.    el \{ .ie '\\$1'-h' \{\
.      ds my:fconfig-dir h
.    \}
.    el \{ .ie '\\$1'-strict' \{\
.      nr my:fconfig-easy 0
.    \}
.    el \{ .ie '\\$1'-debug' \{\
.      nr my:fconfig-debug 1
.    \}
.    el \{\
.      tm \\n(.F:\\n(.c: config error: -dfn\\*[my:font]='\\$*'
.    \}\}\}\}\}\}\}
.    shift
.  \}
.
.  if !'\\$1'\\*[my:font]' \{\
.    my:fspecial \\*[my:font] \\$1
.    if \\n[my:fconfig-easy] \
.      my:fspecial \\$1 \\*[my:font]
.  \}
.  ie \\n[my:fconfig-zoom]>=0 \{\
.    my:fzoom \\$1 \\*[my:font] \\*[my:fconfig-dir] \\n[my:fconfig-zoom]
.  \}
.  if \\n[my:font-ftr] \{\
.    ftr \\*[my:font]R  \\$1R
.    ftr \\*[my:font]I  \\$1I
.    ftr \\*[my:font]B  \\$1B
.    ftr \\*[my:font]BI \\$1BI
.    ftr \\*[my:font]O  \\$1I
.    ftr \\*[my:font]X  \\$1BI
.    ftr \\*[my:font]   \\$1R
.    if '\\*[my:font]'C' \{\
.      ftr \\*[my:font]W  \\$1R
.    \}
.  \}
..
.
.my:fconfig T \*[fnT]
.my:fconfig H \*[fnH]
.my:fconfig C \*[fnC]
.
.nr pp:spacewidth \w'\f(TR \fP'
.
.\" EOF
